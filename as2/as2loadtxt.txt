출처 : http://blog.naver.com/bakjungmok/100002719989

 

[액션활용]프리로더 만들기			
 	
 	
[들어가기 전에...]
 이 강좌에 사용되는 소스는 안에 아무 것도 들어있지 않습니다. -_-;
굳이 이 소스를 다운받을 필요가 전혀 없습니다.
왜냐하면 아무것도 없는 상태에서 시작할 것이니까요.

또, 이 강좌를 보고 프리로더를 완성했다 하더라도 테스트 무비시에는
전혀 표시가 나지 않을 것입니다.
프리로더의 효과를 확실히 보시려면 이 프리로더 뒤에 진짜 원하는 무비를
직접 만든 다음 웹에 올리거나 스트리밍 테스트를 하셔야 합니다.


[프리로더란...]
 플래시 무비가 웹에서 보여지는 과정을 간단하게 이야기하자면 다음과 같습니다.

1. 웹 브라우저가 플래시 파일임을 인식합니다.
2. 웹 브라우저는 플래시 파일을 '임시 인터넷 파일' 폴더에 다운로드합니다.
3. 다운로드된 플래시 파일을 실행하여 우리는 그 무비를 볼 수 있습니다.

이때 플래시는 기본적으로 '스트리밍'을 하기 때문에,
플래시 무비가 완전히 다운로드되지 않아도 플래시 무비는 재생이 됩니다.
다운을 받는 동시에 다운받은 부분까지는 계속 플레이되는 것이지요.
그러나 플래시가 이렇게 편리한 스트리밍을 지원한다 하더라도
현재의 인터넷 환경은 여러가지 제약이 많습니다.
어떠한 일이 벌어질 수 있는지 잠깐만 생각해 볼까요?

1. 용량이 큰 플래시 무비를 보는 도중에 인터넷 회선이 갑자기 느려지면
어떻게 될까요?
예, 뚝뚝 끊기는 현상이 발생할 수 있습니다.

2. 액션을 많이 사용한 게임이나 플래시 홈페이지의 메뉴 등일 경우,
버튼을 클릭하면 무슨 효과가 나야 하는데 아직 그 효과가 다운로드되지 않았다면
또 어떻게 될까요?
예.. 아무 반응이 일어나지 않죠.. 플래시가 말을 못 알아 듣는 경우가 생깁니다.

이런 이유에서 프리로더의 필요성이 대두된 것이지요.
플래시 무비를 완전히 다 다운받을 때까지 기다렸다가 플레이시키는 기술..
이제 그 프리로더를 만드는 법을 하나씩 배워보겠습니다.


[프리로더가 갖추어야 할 조건은?]
 여러분은 웹 상에서 수많은 플래시 무비들을 보았을 것이고,
또한 수많은 프리로더들을 보셨을 것입니다.
(설마 아직도 "프리로더가 뭐예유?" 하는 분들은 없겠죠?)

프리로더를 만들기에 앞서 좋은 프리로더란 어떤 조건을 갖추어야 할지 함께 생각해 보죠.

1. 프리로더는 플래시 무비의 완성도를 높일 수 있어야 한다.
-프리로더는 기본적으로 플래시 무비의 완성도를 높이는 데 기여해야 합니다.
무비가 제대로 다운되지 않아 무비가 끊기거나 반응하지 않거나 하는 일을
최대한 억제시킬 수 있어야 합니다.
또한 메인 플래시 무비와도 분위기가 잘 어울려야 완성도는 더욱 높아질 것입니다.

2. 프리로더는 사용자의 지루함을 덜어 줄 수 있어야 한다.
-플래시 무비를 다운받기를 기다리는 시간 동안, 사용자는 프리로더만을
바라보고 있어야 합니다.
이때 프리로더가 지루한 사용자를 조금이라도 달래 줄 수 있다면 얼마나 좋을까요?

이제 실제 프리로더를 만들도록 하겠습니다.
우리가 만들 프리로더는 아주 기본적인 프리로더의 기능만을 구현할 것이지만,
여러 곳에 응용할 수 있는 몇 가지 아이디어는 드릴 것입니다.
조금 더 살을 붙이고 응용하여 멋진 자신만의 프리로더를 만들어 보세요.


1. 무비 설정하기
 
 새 무비를 하나 만들어주세요.
액션이고 오브젝트고 심벌이고 하나도 없습니다.
^_^

2. 심벌 만들기
 
 자 이제 길쭉한 사각형을 하나 그려봅시다.
저는 테두리 없는 보라색 사각형을 하나 그렸습니다.

 이녀석은 프리로더의 배경으로도 사용하고,
점점 길어지는 로딩바로도 사용할 것이므로
심벌로 만들어 둡시다.
F8 키를 눌러 g_bar라는 이름의 그래픽 심벌로
변환합니다.



 			 
[액션활용]프리로더 만들기			
 	
 	

3. 프리로더 무비클립 만들기
 이제 그래픽 심벌이 준비되었으니 본격적으로 프리로더를 만들도록 하겠습니다.

프리로더는 무비클립으로 만들어 스스로 간단한 애니메이션을 보여주고,
나중에 재사용하기도 쉽게 만들어질 것입니다.



 만들어져 있는 g_bar 심벌을 다시 무비클립으로 만듭니다.
이 무비클립의 이름은 m_preloader로 줍니다.
(m_preloader 무비클립 안에 g_bar 그래픽이 들어가게 됩니다.)


 이제 이 m_preloader 무비클립을 수정하여 진짜 프리로더로 만들어 줍시다.
무비클립에 마우스 오른쪽 버튼을 클릭하여 Edit를 선택합니다.
그러면 무비클립 편집화면으로 이동합니다.	

 
 m_preloader 무비클립의 내부입니다.
레이어 하나, 프레임 하나에
g_bar 그래픽 심벌이 딸랑 썰렁하게 올려져 있습니다.


 			 
[액션활용]프리로더 만들기			

 	
 	
 
 이제 알아보기 쉽게 레이어에 이름을 줍니다.
프리로더 무비클립은 크게 나누어
바탕 그래픽, 움직이는 로딩바, 프리로더 제목, 현재상황 텍스트, 그리고 액션
이렇게 다섯 개의 레이어로 구분할 것입니다.

일단 현재 g_bar 그래픽 심벌이 있는 레이어의 이름을 '바탕'으로 바꿉니다.

 차례대로 레이어를 추가하고 이름을 줍니다.
밑에서부터 바탕, 로딩바, 텍스트, 제목, 액션입니다.	

4. 프리로더 세부 설정하기
 
 이제 맨 아래 레이어부터 차례대로 완성시켜 나갑니다.
맨 아래 '바탕' 레이어에 있는 g_bar 그래픽 심볼을 볼까요?

말 그대로 로딩바의 바탕이 될 부분이기 때문에
로딩바보다는 눈에 덜 띄어야 합니다.
그래서 alpha값을 조절하여 약간 투명한 상태로 만들었습니다.

 이제 '로딩바' 레이어를 보겠습니다.
이곳에는 플래시 무비 다운로드 상태를 한눈에 보여주는 막대 그래프가
들어갈 것입니다.
다운로드를 많이 받을수록 점점 길어지는 막대.. 많이 보셨을 거라 생각합니다.

이 막대로 사용할 g_bar 그래픽 심벌을 '로딩바' 레이어에 끌어 놓습니다.	

 '로딩바' 레이어에 끌어다 놓은 g_bar는 그래픽 심벌이기 때문에 액션스크립트를 통해
그 크기를 제어할 수 없습니다. 그래서 이 심벌을 다시 한번 무비클립으로 만들어주어야 합니다.

(물론 처음부터 g_bar를 무비클립으로 만들어서 사용해도 됩니다만,
바탕 그래픽과 로딩바 무비클립을 철저하게 구분하자는 의도에서 이렇게 사용했습니다.)

'로딩바' 레이어의 g_bar 그래픽 심벌을 선택한 상태에서 F8 키를 눌러
m_loadingbar 라는 이름의 무비클립 심벌로 만들어 줍니다.







 	 	 


 	 	 



 	 	 
 			
[액션활용]프리로더 만들기			
 	
 	
 m_loadingbar 무비클립을 만들었다면 아까와 같은 방법으로
m_loadingbar 무비클립 편집화면으로 이동합니다.
(어떻게 하는지 모르는 분 없겠죠? -_-;)



 m_loadingbar 무비클립 편집화면에 들어오셨다면, Align 패널을 이용하여
보라색 막대가 무비클립의 중심점(십자표시) 바로 오른쪽에 맞게 정렬시킵니다.

이렇게 하는 이유는 막대의 길이를 늘이거나 줄일 때, 이 중심점을 기준으로 하여
길이가 늘거나 줄기 때문입니다.
지금처럼 중심점이 왼쪽에 쏠려 있다면 가로 길이는 오른쪽으로만 길어지게 됩니다.


 m_loadingbar 무비클립을 위와 같이 수정하셨나요?
그렇다면 이제 다시 m_preloader 무비클립 수정화면으로 되돌아옵니다.

m_preloader 무비클립 수정화면에서 '로딩바' 레이어에 있는 m_loadingbar 무비클립을
Align 패널을 이용해 정중앙에 정렬시킵니다.
(이렇게 되면 '바탕' 레이어의 반투명한 사각형을 완전히 가리게 됩니다.)



 
 이렇게 정렬까지 마친 m_loadingbar 무비클립에 이제
인스턴스 이름을 줍니다.
이 강좌에서는 간단하게 'bar'라는 이름을 주었습니다.

무비클립에 인스턴스 이름을 주는 이유는
액션스크립트를 이용하기 위해서입니다.
이름이 있어야 액션이 어떤 무비클립인지 찾을 수 있겠죠?





 	 	 
 			 
[액션활용]프리로더 만들기			
 	
 	
 이제 또 한 레이어 위로 올라가 보겠습니다.
바로 위에 '텍스트'레이어가 있을 것입니다.
이 레이어에 텍스트 필드를 만들어 현재 몇 퍼센트를 다운받았는지 표시할 것입니다.

로딩바 아래쪽에 텍스트 툴로 텍스트 필드를 만듭니다.
저는 _sans 글씨체에 색깔은 검정색, 크기는 12를 주었습니다.
물론 옵션은 다이나믹 텍스트에, 필드 크기는 조금 넉넉하게 주었고,
이 다이나믹 텍스트가 표시할 변수 이름은 'percent'라 주었습니다.
또한 로딩바와 잘 어울리도록 Paragraph 패널에서 중앙정렬을 선택하여
프리로더의 중앙에 퍼센트가 표시되도록 했습니다.



 
 이제 바탕, 로딩바, 텍스트 레이어에 대한 작업이 끝났습니다.
남은 것은 제목, 액션 레이어 뿐이지요?
이제 제목 레이어에 이 프리로더의 제목을 달아줍시다.

로딩바의 위쪽에 'loading...' 이란 글씨를 썼습니다.
물론 '로딩중'이나 '기다리세요..' 등의 문구를 써도 되고,
간단한 무비클립을 넣어 주어도 됩니다.

이 제목의 목적은 특별한 기능보다는 현재 프리로딩중이란
것을 사용자에게 명시적으로 알려주기 위해서입니다.

 
 마지막 액션 레이어에는 간단하게 다음 액션만을 줍니다.

stop();

실제 프리로더는 이 액션이 없어도 잘 돌아갑니다.
굳이 stop(); 액션을 준 이유는 이 프리로더 무비클립은
프레임의 이동이 없이 액션만으로 프레임 로딩 애니메이션을 구현한다는 것을
명시하기 위해서입니다.
단 하나의 프레임을 가지고 액션만으로 제어되는 무비클립의 경우,
stop(); 액션을 통해 정지된 무비클립임을 명시하는 것도
괜찮은 제작습관입니다.

5. 프리로더 무비클립에 액션스크립트 적용하기
 이제 프리로더 무비클립의 제작이 끝났습니다.
프리로더 무비클립은 두 가지 중요한 요소를 가지고 있는데,
그 하나는 다운받은 용량에 따라 길이가 늘어나는 bar 무비클립이고,
또 하나는 그 용량을 숫자로 보여주는 percent 텍스트필드입니다.

이 bar의 길이와 percent의 숫자를 다운받은 용량에 따라 동적으로 보여주기 위해서는
프레임이 반복될 때마다 실행되는 오브젝트 액션이 필요합니다.
이 부분이 프리로더 제작에 있어 가장 중요한 부분이며, 또한 가장 많은
아이디어를 적용할 수 있는 부분입니다.

이제 그 작업을 위해 메인무비 편집화면으로 빠져나갑니다.


 이제 메인무비에는 프리로더 무비클립이 덩그라니 놓여져 있을 것입니다.
레이어를 하나 더 추가하여 후에 프레임 액션을 넣을 수 있도록 준비합니다.	





 	 	 
 			
[액션활용]프리로더 만들기			
 	
 	
 이제 메인무비에 놓여진 프리로더 무비클립을 마우스로 선택합니다.
액션창을 연 후, 다음 액션을 입력합니다.

onClipEvent(enterFrame) {
  if(_root.getBytesLoaded()==_root.getBytesTotal()) {
    _root.gotoAndPlay(2);
  } else {
    this.bar._xscale=Math.floor(_root.getBytesLoaded()/_root.getBytesTotal()*100);
    this.percent=this.bar._xscale+"%";
  }
}



6. 프리로더 무비클립의 액션 분석
 위 그림의 액션창의 제목은 Object Actions(오브젝트 액션)입니다.
오브젝트 액션이란 타임라인에 직접 입력하는 프레임 액션과는 달리
무비클립 오브젝트가 선택된 상태로 무비클립에 직접 입력하는 액션입니다.
프레임 액션은 그 프레임이 실행될 때에만 실행되지만,
오브젝트 액션은 마우스나 키보드의 움직임, 데이터의 이동 등의 다양한 이벤트에 대응하여 실행됩니다.

우리가 만든 프리로더는 한 프레임 위에서 반복하여 다운로드된 양을 체크하므로 오브젝트 액션을 사용합니다.

---------------------------------------------------------------------

onClipEvent(enterFrame) {
-이것은 핸들러(handler)라고 부릅니다. 위에서 얘기한 이벤트 중 enterFrame 이벤트에 대응하기 위해서입니다.
enterFrame 이벤트는 이 무비클립이 프레임에 등장할 때마다 실행됩니다.
최초 무비 설정이 12fps이므로 1초에 12번씩 실행하게 된다는 이야기입니다.

if(_root.getBytesLoaded()==_root.getBytesTotal()) {
-getBytesLoaded()와 getBytesTotal() 액션이야말로 프리로더의 핵심입니다.
플래시4 까지는 ifFrameLoaded 라는 액션을 사용하여 몇번째 프레임이 로딩되었느냐를 체크하여
프리로더를 구현했지만, 플래시5 부터 getBytesLoaded()와 getBytesTotal() 액션을 사용하여
무비의 전체용량과 현재까지 다운된 용량을 쉽게 알 수 있게 되었습니다.
getBytesLoaded()는 현재까지 다운된 용량을 나타냅니다.
getBytesTotal()은 무비의 전체 용량을 나타냅니다.
앞쪽에 쓴 _root는 메인 무비를 의미합니다. 메인 무비의 전체 용량과 다운된 용량을 비교하겠다는 뜻이지요.
이와 같은 방법으로 로딩되는 한개 무비클립의 용량, 혹은 한 레벨의 용량 등도 알아낼 수 있습니다.
더욱 자세한 설명은 액션스크립트 리퍼런스를 참고하세요.

_root.gotoAndPlay(2);
-gotoAndPlay는 아주 간단한 액션이지요?
전체용량과 다운된 용량이 같다면 다음 프레임으로 이동하여 무비를 재생하라는 뜻입니다.
로딩이 다 끝난 후에 실행되는 액션이 되겠지요.

} else {
-아까의 if문의 조건을 만족하지 못한 경우 실행되는 액션입니다.
전체용량과 다운된 용량이 같지 않은 경우 실행되겠지요?

this.bar._xscale=Math.floor(_root.getBytesLoaded()/_root.getBytesTotal()*100);
-이 부분은 bar 무비클립의 가로크기를 다운된 용량에 맞게 늘이기 위한 액션입니다.
this.bar._xscale이란 바로 '프리로더 무비클립 안의 bar 무비클립의 x축 비율'을 의미합니다.
_xscale은 무비클립의 원래 크기일때가 100입니다.
50이라면 원래 크기보다 반이고, 두 배라면 200이 되겠지요.
_root.getBytesLoaded()/_root.getBytesTotal()*100은 무엇일까요?
예, 백분율(퍼센트) 공식이지요. 현재까지 다운된 용량을 전체용량으로 나누어
100을 곱하면
현재까지 다운된 용량이 전체용량의 몇 퍼센트가 되는지 알 수 있습니다.
그 앞에 Math.floor를 붙인 이유는 소숫점 이하 숫자를 없애 보기 깔끔하도록 하기 위해서입니다.
이것을 통해 나온 숫자가 곧 퍼센트이고, bar 무비클립의 x축 비율입니다.
따라서 0부터 100까지 커지게 되고, bar무비클립의 x축 크기도 0부터 원래 크기까지 커지게 됩니다.

this.percent=this.bar._xscale+"%";
-이제 아까 만들어둔 percent 텍스트필드의 값을 지정해 줍니다.
이미 백분율값은 구해두었으므로, 그 뒤에 "%"라는 글자 하나만 추가해주면
누가 보아도 퍼센트임을 알 수 있게 됩니다.

마지막으로 이 액션을 알아듣기 쉽게 해석해보면 다음과 같습니다.
"메인무비의 총 용량과 현재까지 다운된 용량을 비교해서
그 값이 같으면 2번 프레임으로 이동해 무비를 재생하고,
그렇지 않으면 현재까지 다운된 용량의 백분율을 구해
그 크기만큼 bar무비클립의 x축 비율을 증가시키고 percent에 표시하는 일을
1초에 12번씩 실행해라" 라는 뜻입니다.
사람 눈으로 보기엔 연속적으로 자연스럽게 실행되겠죠. ^_^


7. 메인무비의 프레임 액션 입력하기
 
 이제 프리로더의 거의 모든 것을 다 완성했습니다.
마지막으로, 이 프리로더가 프리로더일 수 있기 위해서는
무비가 완전히 다운로드되기 전에는 멈추어 있을 수 있도록 해주어야 합니다.
프리로더가 뭔가 해보기도 전에 무비가 재생되어 버리면 안되겠죠? -_-;

프리로더가 있는 레이어 위에 레이어를 하나 더 추가하여 stop(); 액션을 입력합니다.
이렇게 함으로써 프리로더가 실행되는 동안 무비가 멈추어 있을 수 있도록 합니다.

8. 테스트하기
 이제 무비를 테스트해 보십시오.
아마 제대로 실행되지 않을 것입니다.
프리로더가 무언가 로딩할 거리가 있어야겠죠? ^_^;

이제 프리로더 이후에 프레임을 추가하여 원하는 무비를 만들어보세요.
용량이 충분하다 생각되면 다시 테스트를 합니다.
Ctrl+Enter를 눌러 테스트 무비중에 다시한번 Ctrl+Enter를 누르면
스트리밍 테스트가 시작됩니다.
이렇게 해서 가상으로 다운로드 테스트를 해볼 수 있고,
Debug 메뉴를 통해 다운로드 속도를 조절해볼 수도 있습니다.







 	 	 
 			
[액션활용]프리로더 만들기			
 	
 	
9. 추가 아이디어
 이제 프리로더가 완성되었습니다.
이 프리로더만으로도 기본적인 역할은 충분히 해낼 수 있지만, 모든 프리로더가 같은 모습을 가지고 있지는 않지요.
경험이 쌓이게 되면 스스로 여러 가지 변형을 가한 프리로더를 자유롭게 만들어 낼 수 있겠지만,
제가 드리는 몇 가지 아이디어를 보고 직접 이 프리로더를 고쳐 보십시오.

1. _root.getBytesLoaded(), _root.getBytesTotal()는 용량을 바이트 단위로 계산합니다.
이 말은 곧, 이 값들에 1000씩만 곱하면 킬로바이트(KB) 형식으로 화면에 뿌려줄 수도 있다는 얘기겠지요?

2. _root.getBytesTotal()에서 _root.getBytesLoaded()를 빼어 남은 용량을 알려줄 수도 있습니다.

3. _root.getBytesLoaded()를 getTimer()로 나누면 현재 전송률(bps)를 알 수 있습니다.
인터넷에서 다운로드받을때 많이 보셨죠? ^_^
잊지 말아야 할 것은 반드시 이 값에 1000을 곱해야 합니다.
getTimer()의 값은 1000분의 1초이기 때문이지요.

4. 현재까지 다운받는데 걸린 시간은 getTimer()에 1000을 곱하면 아주 쉽게 알 수 있습니다.

5. 다 다운받기까지 남은 시간은 getBytesTotal()에서 getBytesLoaded()를 뺀 나머지 용량을
현재 전송률로 나누어보면 알 수 있습니다.

아주 간단한 몇 가지 아이디어를 알려드렸습니다.
이 간단한 프리로더를 바탕으로 하여 여러분만의 멋진 프리로더를 제작할 수 있기를 바랍니다. ^_^